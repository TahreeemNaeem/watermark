import os
import tempfile
from typing import Tuple

import gradio as gr
from PIL import Image

from ws import WatermarkRemover


def process(image: Image.Image, engine: str, quality: str) -> Tuple[Image.Image, Image.Image]:
    os.makedirs('outputs/ui', exist_ok=True)
    os.makedirs('outputs/debug', exist_ok=True)

    # Save upload to temp
    with tempfile.NamedTemporaryFile(suffix='.png', delete=False) as f:
        image.save(f.name)
        input_path = f.name

    base_out = os.path.join('outputs/ui', 'result.png')

    remover = WatermarkRemover(debug=False)

    if engine == 'lama':
        ok = remover.process_image_lama(input_path, base_out, quality_preset=quality)
    elif engine == 'ai':
        ok = remover.process_image_ai(input_path, base_out, ai_steps=1500, ai_dim=896, ai_early_stop=200)
    else:
        ok = remover.process_image_fast(input_path, base_out, save_mask=True, inpaint_radius=2)

    if not ok:
        raise gr.Error('Processing failed. Check console for details.')

    # Try to infer mask from filename pattern generated by engines
    base_noext = os.path.splitext(base_out)[0]
    candidate_masks = [
        base_noext + '_mask.png',
        os.path.join('outputs/debug', 'temp_mask_debug_cleaned.png'),
    ]
    mask = None
    for mp in candidate_masks:
        if os.path.exists(mp):
            try:
                mask = Image.open(mp).convert('L')
                break
            except Exception:
                pass
    if mask is None:
        mask = Image.new('L', Image.open(base_out).size, 0)

    return Image.open(base_out), mask


with gr.Blocks(title="Watermark Remover") as demo:
    gr.Markdown("# Watermark Remover\nUpload an image, choose engine, and get a cleaned result.")
    with gr.Row():
        with gr.Column(scale=1):
            inp = gr.Image(type='pil', label='Input image')
            engine = gr.Radio(choices=['lama', 'ai', 'fast'], value='lama', label='Engine')
            quality = gr.Radio(choices=['fast','balanced','high'], value='balanced', label='Quality (detector preset)')
            run_btn = gr.Button('Remove Watermark')
        with gr.Column(scale=1):
            out_img = gr.Image(type='pil', label='Cleaned image')
            out_mask = gr.Image(type='pil', label='Mask used')
    run_btn.click(process, inputs=[inp, engine, quality], outputs=[out_img, out_mask])


if __name__ == '__main__':
    # Launch with a shareable link if localhost is not accessible
    share = os.environ.get('WMR_UI_SHARE', '1') in ('1', 'true', 'True')
    server_name = os.environ.get('WMR_UI_HOST', '127.0.0.1')
    server_port = int(os.environ.get('WMR_UI_PORT', '7860'))
    demo.launch(share=share, server_name=server_name, server_port=server_port)
